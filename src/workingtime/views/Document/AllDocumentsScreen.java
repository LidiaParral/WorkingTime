/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package workingtime.views.Document;

import com.mysql.jdbc.Blob;
import java.awt.Color;
import java.awt.Font;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import workingtime.database.Conexion;
import workingtime.utilities.ExportExcel;
import workingtime.utilities.CleanTable;
import workingtime.utilities.ResetFields;

/**
 * Class AllDocumentsScreen
 *
 * @author Lidia Parral
 * @version 1.0.0
 */
public class AllDocumentsScreen extends javax.swing.JFrame {

    /**
     *
     */
    public ExportExcel export = new ExportExcel();

    /**
     *
     */
    public ResetFields reset = new ResetFields();

    /**
     *
     */
    public CleanTable lmp = new CleanTable();

    Conexion conn = new Conexion();
    Connection conect;

    DefaultTableModel modelo = new DefaultTableModel();

    PreparedStatement ps;
    Statement st;

    ResultSet rs;

    String sql;
    String search;
    String fecha;
    String nomDoc;
    String idUser;
    String idDoc;
    public static String ext;
    public static String extension = "";

    Blob blob;

    int selectedRow;
    Object[] options = {"Aceptar", "Cancelar"};
    int election;

    /**
     * Creates new form AllDocumentsScreen
     */
    public AllDocumentsScreen() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.getContentPane().setBackground(Color.WHITE);
        lblIdEmp.setVisible(false);
        lblDateSearch.setFont(new Font("Century Gothic", Font.BOLD, 14));
        btnDeleteDoc.setFont(new Font("Century Gothic", Font.BOLD, 12));
        btnUpdateDoc.setFont(new Font("Century Gothic", Font.BOLD, 12));
        btnReturn.setFont(new Font("Century Gothic", Font.PLAIN, 12));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaDoc = new javax.swing.JTable();
        lblDateSearch = new javax.swing.JLabel();
        dtFechaSubida = new com.toedter.calendar.JDateChooser();
        btnSearchDoc = new javax.swing.JButton();
        lblIdEmp = new javax.swing.JLabel();
        btnUpdateDoc = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        btnReturn = new javax.swing.JButton();
        btnDeleteDoc = new javax.swing.JButton();
        btnDownloadFile = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setIconImage(getIconImage());
        setUndecorated(true);
        setType(java.awt.Window.Type.POPUP);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        TablaDoc.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "IdDocumento", "Nombre", "Tipo de Documento", "Fecha subida", "Archivo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Long.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(TablaDoc);
        if (TablaDoc.getColumnModel().getColumnCount() > 0) {
            TablaDoc.getColumnModel().getColumn(0).setResizable(false);
        }

        lblDateSearch.setText("Fecha de búsqueda:");

        dtFechaSubida.setBackground(new java.awt.Color(255, 255, 255));
        dtFechaSubida.setToolTipText("dd-MM-yyyy");
        dtFechaSubida.setDateFormatString("dd-MM-yyyy");
        dtFechaSubida.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N

        btnSearchDoc.setBackground(new java.awt.Color(38, 70, 166));
        btnSearchDoc.setForeground(new java.awt.Color(255, 255, 255));
        btnSearchDoc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/lupa.png"))); // NOI18N
        btnSearchDoc.setToolTipText("Este botón permite buscar el documento por fecha.");
        btnSearchDoc.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnSearchDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchDocActionPerformed(evt);
            }
        });

        btnUpdateDoc.setBackground(new java.awt.Color(38, 70, 166));
        btnUpdateDoc.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdateDoc.setText("ACTUALIZAR");
        btnUpdateDoc.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnUpdateDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateDocActionPerformed(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logotipo2.png"))); // NOI18N

        btnReturn.setBackground(new java.awt.Color(204, 204, 204));
        btnReturn.setForeground(new java.awt.Color(255, 255, 255));
        btnReturn.setText("CANCELAR");
        btnReturn.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        btnReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturnActionPerformed(evt);
            }
        });

        btnDeleteDoc.setBackground(new java.awt.Color(255, 126, 60));
        btnDeleteDoc.setForeground(new java.awt.Color(255, 255, 255));
        btnDeleteDoc.setText("ELIMINAR");
        btnDeleteDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteDocActionPerformed(evt);
            }
        });

        btnDownloadFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/download.png"))); // NOI18N
        btnDownloadFile.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        btnDownloadFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDownloadFileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnUpdateDoc, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addComponent(btnDeleteDoc, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(31, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 767, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnReturn, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDateSearch)
                            .addComponent(dtFechaSubida, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSearchDoc, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblIdEmp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDownloadFile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(lblDateSearch)
                        .addGap(6, 6, 6)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(dtFechaSubida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSearchDoc)
                            .addComponent(btnDownloadFile))
                        .addGap(28, 28, 28))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(64, 64, 64)
                                .addComponent(lblIdEmp))
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdateDoc, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDeleteDoc, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnReturn, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Botón Cancelar: Este botón permite retornar a la pantalla HomeScreen.
     *
     * @param evt
     */
    private void btnReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReturnActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnReturnActionPerformed

    /**
     * Botón Search: Este botón permite buscar un documento por una fecha
     * seleccionada.
     *
     * @param evt
     */
    private void btnSearchDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchDocActionPerformed
        search = dtFechaSubida.getDateFormatString();
        if (search.equals("")) {
            JOptionPane.showMessageDialog(null, "No puede estar vacío este campo.", "TODOS LOS EMPLEADOS", JOptionPane.ERROR_MESSAGE);
        } else {
            if (TablaDoc.getRowCount() == 0) {
                existDoc();
            } else {
                lmp.tableCleaning(modelo);
                existDoc();
            }
        }
    }//GEN-LAST:event_btnSearchDocActionPerformed

    /**
     * Botón Actualizar: Este botón permite actualizar los datos de un registro
     * del documento seleccionado.
     *
     * @param evt
     */
    private void btnUpdateDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateDocActionPerformed
        selectedRow = TablaDoc.getSelectedRow();
        election = JOptionPane.showOptionDialog(rootPane, "En realidad desea actualizar los datos del empleado permanentemente", "Mensaje de Confirmacion",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE, null, options, "Aceptar");
        btnUpdateDoc.setBackground(new Color(252, 201, 131));
        if (election == JOptionPane.YES_OPTION) {
            if (selectedRow < 0) {
                JOptionPane.showMessageDialog(null, "No se ha seleccionado ningún registro para actualizar", "ERROR", JOptionPane.INFORMATION_MESSAGE);
            } else {
                updateDocument();
                consult();
            }
        } else if (election == JOptionPane.NO_OPTION) {
            JOptionPane.showMessageDialog(null, "No se ha actualizado el empleado de la base de datos", "EMPLEADO", JOptionPane.PLAIN_MESSAGE);
        }
        btnUpdateDoc.setBackground(new Color(38, 70, 166));
    }//GEN-LAST:event_btnUpdateDocActionPerformed

    /**
     * Botón Eliminar: Este botón permite eliminar un registro del documento
     * seleccionado.
     *
     * @param evt
     */
    private void btnDeleteDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteDocActionPerformed
        selectedRow = TablaDoc.getSelectedRow();
        election = JOptionPane.showOptionDialog(rootPane, "En realidad desea eliminar los datos del empleado permanentemente", "Mensaje de Confirmacion",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE, null, options, "Aceptar");
        btnDeleteDoc.setBackground(new Color(145, 150, 255));
        if (election == JOptionPane.YES_OPTION) {
            if (selectedRow < 0) {
                JOptionPane.showMessageDialog(null, "No se ha seleccionado ningún registro para eliminar", "ERROR", JOptionPane.INFORMATION_MESSAGE);
            } else {
                deleteDocument();
                consult();
            }
        } else if (election == JOptionPane.NO_OPTION) {
            JOptionPane.showMessageDialog(null, "No se ha actualizado el empleado de la base de datos", "EMPLEADO", JOptionPane.PLAIN_MESSAGE);
        }
        btnDeleteDoc.setBackground(new Color(255, 126, 60));
    }//GEN-LAST:event_btnDeleteDocActionPerformed

    private void btnDownloadFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDownloadFileActionPerformed
        try {
            downloadFile();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(AllDocumentsScreen.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(AllDocumentsScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDownloadFileActionPerformed

    /**
     * Método existDoc: Este botón permite comprobar si existe un registro del
     * documento con una fecha concreta en la base de datos.
     */
    public void existDoc() {
        fecha = new SimpleDateFormat("yyyy-MM-dd").format(dtFechaSubida.getDate());

        if (fecha.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Este campo no puede estar vacío", "VALIDACIÓN DE CAMPOS", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                sql = "SELECT * FROM documentos_empleados WHERE FechaSubida ='" + fecha + "'";

                conect = conn.getConexion();
                ps = conect.prepareStatement(sql);
                rs = ps.executeQuery(sql);
                Object[] documento = new Object[5];
                modelo = (DefaultTableModel) TablaDoc.getModel();
                while (rs.next()) {
                    documento[0] = rs.getInt("IdDocumento");
                    documento[1] = rs.getString("NombreDoc");
                    documento[2] = rs.getString("TipoDocumento");
                    documento[3] = rs.getString("FechaSubida");
                    documento[4] = rs.getString("Archivo");

                    modelo.addRow(documento);
                }
                TablaDoc.setModel(modelo);

            } catch (SQLException ex) {
                System.err.println("Error:" + ex);
                JOptionPane.showMessageDialog(null, "Error interno en el sistema.", "ERROR", JOptionPane.ERROR_MESSAGE);
            }

        }
        reset.ResetPanel(jPanel2);

    }

    /**
     * Método consult: Este método permite consultar todos los documentos de un
     * empleado en la base de datos.
     */
    public void consult() {
        idUser = lblIdEmp.getText();
        try {
            sql = "SELECT * FROM documentos_empleados WHERE IdEmpleado ='" + idUser + "'";

            conect = conn.getConexion();
            ps = conect.prepareStatement(sql);
            rs = ps.executeQuery(sql);

            Object[] documento = new Object[5];
            modelo = (DefaultTableModel) TablaDoc.getModel();
            while (rs.next()) {
                documento[0] = rs.getInt("IdDocumento");
                documento[1] = rs.getString("NombreDoc");
                documento[2] = rs.getString("TipoDocumento");
                documento[3] = rs.getString("FechaSubida");
                documento[4] = rs.getString("Archivo");

                modelo.addRow(documento);
            }
            TablaDoc.setModel(modelo);

        } catch (SQLException ex) {
            System.err.println("Error:" + ex);
            JOptionPane.showMessageDialog(null, "Error interno en el sistema.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        reset.ResetPanel(jPanel2);
    }

    /**
     * Método updateDocument: Este método permite actualizar los datos de un
     * registro de un documento seleccionado en la base de datos.
     */
    public void updateDocument() {
        nomDoc = String.valueOf(modelo.getValueAt(TablaDoc.getSelectedRow(), 1));
        idUser = lblIdEmp.getText();
        try {

            sql = "UPDATE documentos_empleados SET NombreDoc='" + nomDoc + "' WHERE IdEmpleado ='" + idUser + "'";

            conect = conn.getConexion();
            st = conect.createStatement();
            st.executeUpdate(sql);
            JOptionPane.showMessageDialog(null, "Registro actualizado.", "DOCUMENTO", JOptionPane.OK_OPTION);
        } catch (SQLException ex) {
            System.err.println("Error:" + ex);
            JOptionPane.showMessageDialog(null, "Error interno en el sistema.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        lmp.tableCleaning(modelo);
    }

    /**
     * Método deleteDocument: Este método permite eliminar un registro de un
     * documento seleccionado en la base de datos.
     */
    public void deleteDocument() {
        idUser = lblIdEmp.getText();
        idDoc = String.valueOf(modelo.getValueAt(TablaDoc.getSelectedRow(), 0));
        try {
            sql = "DELETE FROM documentos_empleados WHERE IdEmpleado='" + idUser + "' AND IdDocumento='" + idDoc + "'";

            conect = conn.getConexion();
            st = conect.createStatement();
            st.executeUpdate(sql);
            JOptionPane.showMessageDialog(null, "Registro eliminado.", "DOCUMENTO", JOptionPane.OK_OPTION);
        } catch (SQLException ex) {
            System.err.println("Error:" + ex);
            JOptionPane.showMessageDialog(null, "Error interno en el sistema.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        lmp.tableCleaning(modelo);
    }

    public void downloadFile() throws FileNotFoundException, IOException {
        idUser = lblIdEmp.getText(); // Suponiendo que lblIdEmp es un JLabel donde se muestra el ID del empleado
        selectedRow = TablaDoc.getSelectedRow(); // Suponiendo que TablaDoc es una tabla donde se muestran los documentos

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(null, "Por favor, seleccione un documento.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        idDoc = String.valueOf(modelo.getValueAt(selectedRow, 0));

        try {
            String nombre = JOptionPane.showInputDialog(null, "Nombre", "ARCHIVO");
            conect = conn.getConexion();
            sql = "SELECT TipoDocumento, NombreDoc, Archivo FROM documentos_empleados WHERE IdEmpleado=? AND IdDocumento=?";
            try (PreparedStatement ps = conect.prepareStatement(sql)) {
                ps.setString(1, idUser);
                ps.setString(2, idDoc);
                try ( ResultSet rs = ps.executeQuery()) {
                    if (rs.next()) {
                        String tipoDoc = rs.getString("TipoDocumento");
                        String name = rs.getString("NombreDoc");
                        InputStream in = rs.getBinaryStream("Archivo");

                        extension = getExtension(name);
                        File archivo = new File(System.getProperty("user.home") + File.separator + "Downloads" + File.separator + nombre + extension);

                        try ( OutputStream out = new FileOutputStream(archivo)) {
                            byte[] buffer = new byte[8192 * 16];
                            int bytesRead;
                            while ((bytesRead = in.read(buffer)) != -1) {
                                out.write(buffer, 0, bytesRead);
                            }
                            out.flush();
                            out.close();
                            in.close();
                            JOptionPane.showMessageDialog(null, "Archivo descargado correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                        }
                        
                    } else {
                        JOptionPane.showMessageDialog(null, "No se encontró el archivo en la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        } catch (SQLException | IOException ex) {
            System.err.println("Error al acceder a la base de datos: " + ex.getMessage());
            JOptionPane.showMessageDialog(null, "Error al acceder a la base de datos.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    public static String getExtension(String filename) {
        int index = filename.lastIndexOf('.');
        if (index == -1) {
            return "";
        } else {
            return filename.substring(index);
        }
    }

    /**
     * Método getIconImage: Este método permite obtener el icono de la
     * aplicación.
     *
     * @return icon
     */
    @Override
    public Image getIconImage() {
        Image retValue = Toolkit.getDefaultToolkit().
                getImage(ClassLoader.getSystemResource("images/logotipo.png"));
        return retValue;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AllDocumentsScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AllDocumentsScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AllDocumentsScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AllDocumentsScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new AllDocumentsScreen().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TablaDoc;
    public javax.swing.JButton btnDeleteDoc;
    private javax.swing.JButton btnDownloadFile;
    private javax.swing.JButton btnReturn;
    public javax.swing.JButton btnSearchDoc;
    public javax.swing.JButton btnUpdateDoc;
    private com.toedter.calendar.JDateChooser dtFechaSubida;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDateSearch;
    public javax.swing.JLabel lblIdEmp;
    // End of variables declaration//GEN-END:variables
}
