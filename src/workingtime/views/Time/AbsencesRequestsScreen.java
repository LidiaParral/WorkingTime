/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package workingtime.views.Time;

import com.toedter.calendar.JCalendar;
import java.awt.Color;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import workingtime.database.Conexion;
import workingtime.utilities.CleanTable;
import workingtime.utilities.ResetFields;

/**
 * Class AbsencesScreen
 * @author Lidia Parral
 * @version 1.0.0
 */
public final class AbsencesRequestsScreen extends javax.swing.JFrame {

    /**
     *
     */
    public ResetFields reset = new ResetFields();

    /**
     *
     */
    public CleanTable lmp = new CleanTable();

    Conexion conn = new Conexion();
    Connection conect;

    DefaultTableModel model;

    PreparedStatement ps;
    Statement st;

    ResultSet rs;

    String sql;
    String idUser;
    String dpto;
    String employee;
    String dateFin;
    String dateStart;
    String typeRequest;
    String reason;
    String reqAbs;
    String dayOfWeek;
    String idAbsence;

    int selectedRow;
    Object[] options = {"Aceptar", "Cancelar"};
    int election;
    int day;

    /**
     * Creates new form AbsencesScreen
     */
    public AbsencesRequestsScreen() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.getContentPane().setBackground(Color.WHITE);
        lblIdEmp.setVisible(false);
        lblDepartment.setVisible(false);
        lblIdAbs.setVisible(true);
        lblEmployee.setFont(new Font("Century Gothic", Font.BOLD, 14));
        lblDateStart.setFont(new Font("Century Gothic", Font.BOLD, 14));
        lblDateFin.setFont(new Font("Century Gothic", Font.BOLD, 14));
        lblTypeRequest.setFont(new Font("Century Gothic", Font.BOLD, 14));
        lblReason.setFont(new Font("Century Gothic", Font.BOLD, 14));
        btnApproved.setFont(new Font("Century Gothic", Font.BOLD, 12));
        btnRejectAbs.setFont(new Font("Century Gothic", Font.BOLD, 12));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblIdEmp = new javax.swing.JLabel();
        lblDepartment = new javax.swing.JLabel();
        lblEmployee = new javax.swing.JLabel();
        lblDateStart = new javax.swing.JLabel();
        lblDateFin = new javax.swing.JLabel();
        txtManager = new javax.swing.JTextField();
        dtDateStartAb = new com.toedter.calendar.JDateChooser();
        dtDateFinAb = new com.toedter.calendar.JDateChooser();
        lblTypeRequest = new javax.swing.JLabel();
        lblReason = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtaReasonAb = new javax.swing.JTextArea();
        txtTypeAbsence = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableAbsence = new javax.swing.JTable();
        lblIdAbs = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        btnApproved = new javax.swing.JButton();
        btnRejectAbs = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setIconImage(getIconImage());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        lblIdEmp.setEnabled(false);
        lblIdEmp.setFocusable(false);

        lblEmployee.setText("Empleado:");

        lblDateStart.setText("Fecha de inicio:");

        lblDateFin.setText("Fecha de fin:");

        txtManager.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        txtManager.setEnabled(false);

        dtDateStartAb.setBackground(new java.awt.Color(255, 255, 255));
        dtDateStartAb.setToolTipText("dd-MM-yyyy");
        dtDateStartAb.setDateFormatString("dd-MM-yyyy");
        dtDateStartAb.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        dtDateStartAb.setMinSelectableDate(new Date());

        dtDateFinAb.setBackground(new java.awt.Color(255, 255, 255));
        dtDateFinAb.setToolTipText("dd-MM-yyyy");
        dtDateFinAb.setDateFormatString("dd-MM-yyyy");
        dtDateFinAb.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        dtDateFinAb.setMinSelectableDate(new Date());

        lblTypeRequest.setText("Tipo de solicitud");

        lblReason.setText("Motivo de ausencia:");

        txtaReasonAb.setColumns(20);
        txtaReasonAb.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        txtaReasonAb.setRows(5);
        jScrollPane1.setViewportView(txtaReasonAb);

        txtTypeAbsence.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        txtTypeAbsence.setEnabled(false);
        txtTypeAbsence.setFocusable(false);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logotipo2.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtTypeAbsence, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblEmployee)
                            .addComponent(dtDateFinAb, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDateStart)
                            .addComponent(lblTypeRequest)
                            .addComponent(txtManager, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblIdEmp))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblReason)
                            .addComponent(lblDateFin)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(dtDateStartAb, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblDepartment)))
                        .addContainerGap(103, Short.MAX_VALUE))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblIdEmp)
                    .addComponent(lblEmployee))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtManager, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblTypeRequest)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtTypeAbsence, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblDateStart)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDepartment)
                    .addComponent(dtDateStartAb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(lblDateFin)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dtDateFinAb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblReason)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        TableAbsence.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Empleado", "Departamento", "Tipo de Solicitud", "Peticion"
            }
        ));
        jScrollPane2.setViewportView(TableAbsence);

        lblIdAbs.setEnabled(false);
        lblIdAbs.setFocusable(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(lblIdAbs))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 379, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblIdAbs)
                .addGap(39, 39, 39))
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        btnApproved.setBackground(new java.awt.Color(38, 70, 166));
        btnApproved.setForeground(new java.awt.Color(255, 255, 255));
        btnApproved.setText("APROBAR");
        btnApproved.setToolTipText("Este botón permite aprobar la ausencia seleccionada del empleado.");
        btnApproved.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnApproved.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApprovedActionPerformed(evt);
            }
        });

        btnRejectAbs.setBackground(new java.awt.Color(255, 126, 60));
        btnRejectAbs.setForeground(new java.awt.Color(255, 255, 255));
        btnRejectAbs.setText("RECHAZAR");
        btnRejectAbs.setToolTipText("Este botón permite rechazar la solicitud de la asusencia seleccionada");
        btnRejectAbs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRejectAbsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(btnApproved, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnRejectAbs, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(268, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(10, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnApproved, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRejectAbs, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 2, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 508, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Botón Actualizar: Este botón permite actualizar los datos de la ausencia seleccionada de un empleado.
     * @param evt 
     */
    private void btnApprovedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApprovedActionPerformed
        selectedRow = TableAbsence.getSelectedRow();
        election = JOptionPane.showOptionDialog(rootPane, "En realidad desea actualizar los datos del empleado permanentemente", "Mensaje de Confirmacion",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE, null, options, "Aceptar");
        btnApproved.setBackground(new Color(252, 201, 131));
        if (election == JOptionPane.YES_OPTION) {
            if (selectedRow < 0) {
                JOptionPane.showMessageDialog(null, "No se ha seleccionado ningún registro para actualizar", "ERROR", JOptionPane.INFORMATION_MESSAGE);
            } else {
                approvedAbsence();
                consult();
            }
        } else if (election == JOptionPane.NO_OPTION) {
            JOptionPane.showMessageDialog(null, "No se ha actualizado el empleado de la base de datos", "EMPLEADO", JOptionPane.PLAIN_MESSAGE);
        }
        btnApproved.setBackground(new Color(38, 70, 166));
    }//GEN-LAST:event_btnApprovedActionPerformed

    /**
     * Botón Eliminar: Este botón permite eliminar los datos de la ausencia seleccionada de un empleado
     * @param evt 
     */
    private void btnRejectAbsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRejectAbsActionPerformed
        selectedRow = TableAbsence.getSelectedRow();
        election = JOptionPane.showOptionDialog(rootPane, "En realidad desea eliminar los datos del empleado permanentemente", "Mensaje de Confirmacion",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE, null, options, "Aceptar");
        btnRejectAbs.setBackground(new Color(145, 150, 255));
        if (election == JOptionPane.YES_OPTION) {
            if (selectedRow < 0) {
                JOptionPane.showMessageDialog(null, "No se ha seleccionado ningún registro para eliminar", "ERROR", JOptionPane.INFORMATION_MESSAGE);
            } else {
                rejectedAbsence();
                consult();
            }
        } else if (election == JOptionPane.NO_OPTION) {
            JOptionPane.showMessageDialog(null, "No se ha actualizado el empleado de la base de datos", "EMPLEADO", JOptionPane.PLAIN_MESSAGE);
        }
        btnRejectAbs.setBackground(new Color(255, 126, 60));
    }//GEN-LAST:event_btnRejectAbsActionPerformed

    /**
     * Método approvedAbsence:
     */
    public void approvedAbsence() {
        if (dpto.isEmpty() || employee.isEmpty() || dateStart.isEmpty() || dateFin.isEmpty() || reason.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Los campos no pueden estar vacíos.", "ERROR", JOptionPane.ERROR_MESSAGE);
        } else if(dtDateFinAb.getDate().before(dtDateStartAb.getDate())){
            JOptionPane.showMessageDialog(null, "La fecha de fin no puede ser anterior a la fecha de inicio.", "VALIDACIÓN DE CAMPOS", JOptionPane.ERROR_MESSAGE);
        } else if(dtDateStartAb.getDate().after(dtDateFinAb.getDate())){
            JOptionPane.showMessageDialog(null, "La fecha de inicio no puede ser posterior a la fecha de fin.", "VALIDACIÓN DE CAMPOS", JOptionPane.ERROR_MESSAGE);
        }else {
            employee = String.valueOf(model.getValueAt(TableAbsence.getSelectedRow(), 0));
            dateStart = String.valueOf(model.getValueAt(TableAbsence.getSelectedRow(), 1));
            dateFin = String.valueOf(model.getValueAt(TableAbsence.getSelectedRow(), 2));
            typeRequest = String.valueOf(model.getValueAt(TableAbsence.getSelectedRow(), 3));
            reason = String.valueOf(model.getValueAt(TableAbsence.getSelectedRow(), 4));
            reqAbs = String.valueOf(model.getValueAt(TableAbsence.getSelectedRow(), 4));
            try {
                sql = "UPDATE registro_ausencia SET Peticion='"+ "APROBADO" +"' WHERE IdEmpleado='" + idUser + "'"
                        + "AND FechaInicio='" + dateStart + "' AND FechaFin='" + dateFin + "'";

                System.out.println(sql);
                conect = conn.getConexion();
                st = conect.createStatement();
                st.executeUpdate(sql);
                JOptionPane.showMessageDialog(null, "El registro se actualizó correctamente.", "ACTUALIZACIÓN AUSENCIA", JOptionPane.INFORMATION_MESSAGE);
            } catch (HeadlessException | SQLException ex) {
                System.err.println("Error:" + ex);
                JOptionPane.showMessageDialog(null, "Error interno en el sistema.", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        }
       
        cleanData();
        lmp.tableCleaning(model);
    }

    
    /**
     * Método rejectedAbsence:
     */
    public void rejectedAbsence() {
        if (dpto.isEmpty() || employee.isEmpty() || dateStart.isEmpty() || dateFin.isEmpty() || reason.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Los campos no pueden estar vacíos.", "ERROR", JOptionPane.ERROR_MESSAGE);
        } else if(dtDateFinAb.getDate().before(dtDateStartAb.getDate())){
            JOptionPane.showMessageDialog(null, "La fecha de fin no puede ser anterior a la fecha de inicio.", "VALIDACIÓN DE CAMPOS", JOptionPane.ERROR_MESSAGE);
        } else if(dtDateStartAb.getDate().after(dtDateFinAb.getDate())){
            JOptionPane.showMessageDialog(null, "La fecha de inicio no puede ser posterior a la fecha de fin.", "VALIDACIÓN DE CAMPOS", JOptionPane.ERROR_MESSAGE);
        }else {
            employee = String.valueOf(model.getValueAt(TableAbsence.getSelectedRow(), 0));
            dateStart = String.valueOf(model.getValueAt(TableAbsence.getSelectedRow(), 1));
            dateFin = String.valueOf(model.getValueAt(TableAbsence.getSelectedRow(), 2));
            typeRequest = String.valueOf(model.getValueAt(TableAbsence.getSelectedRow(), 3));
            reason = String.valueOf(model.getValueAt(TableAbsence.getSelectedRow(), 4));
            reqAbs = String.valueOf(model.getValueAt(TableAbsence.getSelectedRow(), 4));
            try {
                sql = "UPDATE registro_ausencia SET Peticion='"+ "RECHAZADO" +"' WHERE IdEmpleado='" + idUser + "'"
                        + "AND FechaInicio='" + dateStart + "' AND FechaFin='" + dateFin + "'";

                System.out.println(sql);
                conect = conn.getConexion();
                st = conect.createStatement();
                st.executeUpdate(sql);
                JOptionPane.showMessageDialog(null, "El registro se actualizó correctamente.", "ACTUALIZACIÓN AUSENCIA", JOptionPane.INFORMATION_MESSAGE);
            } catch (HeadlessException | SQLException ex) {
                System.err.println("Error:" + ex);
                JOptionPane.showMessageDialog(null, "Error interno en el sistema.", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        }
       
        cleanData();
        lmp.tableCleaning(model);
    }
    
    /**
     * Método cleanData: Este método permite limpiar los campos del formulario.
     */
    public void cleanData() {
        reset.ResetPanel(jPanel1);
        dtDateStartAb.setCalendar(null);
        dtDateFinAb.setCalendar(null);
        txtManager.setText("");
        txtTypeAbsence.setText("");
        txtaReasonAb.setText("");
    }


    /**
     * Método consult: Este método permite consultar los datos de todas las ausencias de la base de datos.
     */
    public void consult() {
        sql = "SELECT * FROM registro_ausencia";

        try {
            conect = conn.getConexion();
            st = conect.createStatement();
            rs = st.executeQuery(sql);

            Object[] absence = new Object[5];
            model = (DefaultTableModel) TableAbsence.getModel();
            while (rs.next()) {
                absence[0] = rs.getString("Empleado");
                absence[1] = rs.getString("Departamento");
                absence[2] = rs.getString("TipoSolicitud");
                absence[3] = rs.getString("Peticion");

                model.addRow(absence);
            }
            TableAbsence.setModel(model);
        } catch (SQLException ex) {
            System.err.println("Error:" + ex);
            JOptionPane.showMessageDialog(null, "Error interno en el sistema.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }
      
    /**
     * Método getIconImage: Este método permite obtener el icono de la
     * aplicación.
     *
     * @return icon
     */
    @Override
    public Image getIconImage() {
        Image retValue = Toolkit.getDefaultToolkit().
                getImage(ClassLoader.getSystemResource("images/logotipo.png"));
        return retValue;
    }

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AbsencesRequestsScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AbsencesRequestsScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AbsencesRequestsScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AbsencesRequestsScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new AbsencesRequestsScreen().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TableAbsence;
    private javax.swing.JButton btnApproved;
    private javax.swing.JButton btnRejectAbs;
    public com.toedter.calendar.JDateChooser dtDateFinAb;
    public com.toedter.calendar.JDateChooser dtDateStartAb;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblDateFin;
    private javax.swing.JLabel lblDateStart;
    public javax.swing.JLabel lblDepartment;
    private javax.swing.JLabel lblEmployee;
    public javax.swing.JLabel lblIdAbs;
    public javax.swing.JLabel lblIdEmp;
    private javax.swing.JLabel lblReason;
    private javax.swing.JLabel lblTypeRequest;
    public javax.swing.JTextField txtManager;
    public javax.swing.JTextField txtTypeAbsence;
    public javax.swing.JTextArea txtaReasonAb;
    // End of variables declaration//GEN-END:variables
}
